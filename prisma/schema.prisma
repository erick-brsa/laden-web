generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            Int     @map("user_id")
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              Int               @id @default(autoincrement())
    name            String?
    email           String?           @unique
    emailVerified   DateTime?
    password        String?
    image           String?
    phoneNumber     String?           @default("00-0000-0000") @map("phone_number")
    role            String            @default("cliente")
    createdAt       DateTime          @default(now()) @map(name: "created_at")
    updatedAt       DateTime          @updatedAt @map(name: "updated_at")
    accounts        Account[]
    sessions        Session[]
    address         Address[]
    product         Product[]
    cart            Cart[]
    wishList        WishList[]
    review          Review[]
    comment         Comment[]
    Notification    Notification[]
    shoppingHistory ShoppingHistory[]

    Report Report[]
    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Address {
    id          String @id @default(cuid())
    userId      Int    @map("user_id")
    street      String
    city        String
    state       String
    postal_code Int
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "addresses")
}

model Category {
    id            Int           @id @default(autoincrement())
    name          String
    image         String
    path          String        @unique
    subcategories Subcategory[]
    product       Product[]

    @@map(name: "categories")
}

model Subcategory {
    id             Int       @id @default(autoincrement())
    mainCategoryId Int       @map("main_category_id")
    name           String
    path           String    @unique
    category       Category  @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
    product        Product[]

    @@map(name: "subcategories")
}

model Product {
    id             Int         @id @default(autoincrement())
    name           String
    price          Decimal     @db.Decimal(10, 2)
    description    String      @db.Text
    inStock        Int
    slug           String      @unique
    tags           Json?
    sold           Int?        @default(0)
    sellerId       Int         @map("seller_id")
    categoryId     Int         @map("category_id")
    subcategoryId  Int         @map("subcategory_id")
    images         Json
    specifications Json?
    createdAt      DateTime    @default(now()) @map(name: "created_at")
    updatedAt      DateTime    @updatedAt @map(name: "updated_at")
    user           User        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    category       Category    @relation(fields: [categoryId], references: [id])
    subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
    review         Review[]
    comment        Comment[]
    cart           Cart[]
    wishList       WishList[]

    @@map(name: "products")
}

model Review {
    id            String   @id @default(cuid())
    userId        Int      @map("user_id")
    productId     Int      @map("product_id")
    qualification Int      @default(0)
    message       String   @db.LongText
    createdAt     DateTime @default(now()) @map(name: "created_at")
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map(name: "reviews")
}

model Comment {
    id        String   @id @default(cuid())
    userId    Int      @map("user_id")
    productId Int      @map("product_id")
    comment   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map(name: "comments")
}

model Notification {
    id        String   @id @default(cuid())
    userId    Int      @map("user_id")
    message   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "notifications")
}

model Cart {
    id        String   @id @default(cuid())
    userId    Int      @map("user_id")
    productId Int      @map("product_id")
    quantity  Int      @default(1)
    createdAt DateTime @default(now()) @map(name: "created_at")

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map(name: "cart")
}

model WishList {
    id        String   @id @default(cuid())
    userId    Int      @map("user_id")
    productId Int      @map("product_id")
    createdAt DateTime @default(now()) @map(name: "created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map(name: "wishlist")
}

model ShoppingHistory {
    id        String   @id @default(cuid())
    userId    Int      @map("user_id")
    order     Json
    amount    Decimal  @db.Decimal(10, 2)
    createdAt DateTime @default(now()) @map(name: "created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "shopping_history")
}

model Suggestion {
    id        String   @id @default(cuid())
    title     String
    message   String   @db.LongText
    createdAt DateTime @default(now()) @map(name: "created_at")

    @@map(name: "suggestions")
}

model Report {
    id         String   @id @default(cuid())
    userId     Int      @map("user_id")
    status     String   @default("Sin avance")
    type       String
    title      String
    message    String   @db.LongText
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now()) @map(name: "created_at")

    @@map(name: "reports")
} 

model Faq {
    id        String   @id @default(cuid())
    question  String
    answer    String   @db.LongText
    createdAt DateTime @default(now()) @map(name: "created_at")

    @@map(name: "faqs")
}
